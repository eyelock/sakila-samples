// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.sakila.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import net.eyelock.sakila.domain.Actor;
import net.eyelock.sakila.domain.ActorDataOnDemand;
import net.eyelock.sakila.domain.Film;
import net.eyelock.sakila.domain.FilmActor;
import net.eyelock.sakila.domain.FilmActorDataOnDemand;
import net.eyelock.sakila.domain.FilmActorPK;
import net.eyelock.sakila.domain.FilmDataOnDemand;
import net.eyelock.sakila.repositories.FilmActorRepository;
import net.eyelock.sakila.services.FilmActorService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect FilmActorDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FilmActorDataOnDemand: @Component;
    
    private Random FilmActorDataOnDemand.rnd = new SecureRandom();
    
    private List<FilmActor> FilmActorDataOnDemand.data;
    
    @Autowired
    ActorDataOnDemand FilmActorDataOnDemand.actorDataOnDemand;
    
    @Autowired
    FilmDataOnDemand FilmActorDataOnDemand.filmDataOnDemand;
    
    @Autowired
    FilmActorService FilmActorDataOnDemand.filmActorService;
    
    @Autowired
    FilmActorRepository FilmActorDataOnDemand.filmActorRepository;
    
    public FilmActor FilmActorDataOnDemand.getNewTransientFilmActor(int index) {
        FilmActor obj = new FilmActor();
        setEmbeddedIdClass(obj, index);
        setActorId(obj, index);
        setFilmId(obj, index);
        setLastUpdate(obj, index);
        return obj;
    }
    
    public void FilmActorDataOnDemand.setEmbeddedIdClass(FilmActor obj, int index) {
        Short actorId = new Integer(index).shortValue();
        Short filmId = new Integer(index).shortValue();
        
        FilmActorPK embeddedIdClass = new FilmActorPK(actorId, filmId);
        obj.setId(embeddedIdClass);
    }
    
    public void FilmActorDataOnDemand.setActorId(FilmActor obj, int index) {
        Actor actorId = actorDataOnDemand.getRandomActor();
        obj.setActorId(actorId);
    }
    
    public void FilmActorDataOnDemand.setFilmId(FilmActor obj, int index) {
        Film filmId = filmDataOnDemand.getRandomFilm();
        obj.setFilmId(filmId);
    }
    
    public void FilmActorDataOnDemand.setLastUpdate(FilmActor obj, int index) {
        Calendar lastUpdate = Calendar.getInstance();
        obj.setLastUpdate(lastUpdate);
    }
    
    public FilmActor FilmActorDataOnDemand.getSpecificFilmActor(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        FilmActor obj = data.get(index);
        FilmActorPK id = obj.getId();
        return filmActorService.findFilmActor(id);
    }
    
    public FilmActor FilmActorDataOnDemand.getRandomFilmActor() {
        init();
        FilmActor obj = data.get(rnd.nextInt(data.size()));
        FilmActorPK id = obj.getId();
        return filmActorService.findFilmActor(id);
    }
    
    public boolean FilmActorDataOnDemand.modifyFilmActor(FilmActor obj) {
        return false;
    }
    
    public void FilmActorDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = filmActorService.findFilmActorEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'FilmActor' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<FilmActor>();
        for (int i = 0; i < 10; i++) {
            FilmActor obj = getNewTransientFilmActor(i);
            try {
                filmActorService.saveFilmActor(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            filmActorRepository.flush();
            data.add(obj);
        }
    }
    
}
