// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.sakila.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import net.eyelock.sakila.domain.FilmText;
import net.eyelock.sakila.domain.FilmTextDataOnDemand;
import net.eyelock.sakila.repositories.FilmTextRepository;
import net.eyelock.sakila.services.FilmTextService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect FilmTextDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FilmTextDataOnDemand: @Component;
    
    private Random FilmTextDataOnDemand.rnd = new SecureRandom();
    
    private List<FilmText> FilmTextDataOnDemand.data;
    
    @Autowired
    FilmTextService FilmTextDataOnDemand.filmTextService;
    
    @Autowired
    FilmTextRepository FilmTextDataOnDemand.filmTextRepository;
    
    public FilmText FilmTextDataOnDemand.getNewTransientFilmText(int index) {
        FilmText obj = new FilmText();
        setDescription(obj, index);
        setTitle(obj, index);
        return obj;
    }
    
    public void FilmTextDataOnDemand.setDescription(FilmText obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void FilmTextDataOnDemand.setTitle(FilmText obj, int index) {
        String title = "title_" + index;
        if (title.length() > 255) {
            title = title.substring(0, 255);
        }
        obj.setTitle(title);
    }
    
    public FilmText FilmTextDataOnDemand.getSpecificFilmText(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        FilmText obj = data.get(index);
        Short id = obj.getFilmId();
        return filmTextService.findFilmText(id);
    }
    
    public FilmText FilmTextDataOnDemand.getRandomFilmText() {
        init();
        FilmText obj = data.get(rnd.nextInt(data.size()));
        Short id = obj.getFilmId();
        return filmTextService.findFilmText(id);
    }
    
    public boolean FilmTextDataOnDemand.modifyFilmText(FilmText obj) {
        return false;
    }
    
    public void FilmTextDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = filmTextService.findFilmTextEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'FilmText' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<FilmText>();
        for (int i = 0; i < 10; i++) {
            FilmText obj = getNewTransientFilmText(i);
            try {
                filmTextService.saveFilmText(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            filmTextRepository.flush();
            data.add(obj);
        }
    }
    
}
