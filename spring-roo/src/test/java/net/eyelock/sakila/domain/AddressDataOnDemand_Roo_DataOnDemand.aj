// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.sakila.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import net.eyelock.sakila.domain.Address;
import net.eyelock.sakila.domain.AddressDataOnDemand;
import net.eyelock.sakila.domain.City;
import net.eyelock.sakila.domain.CityDataOnDemand;
import net.eyelock.sakila.repositories.AddressRepository;
import net.eyelock.sakila.services.AddressService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AddressDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AddressDataOnDemand: @Component;
    
    private Random AddressDataOnDemand.rnd = new SecureRandom();
    
    private List<Address> AddressDataOnDemand.data;
    
    @Autowired
    CityDataOnDemand AddressDataOnDemand.cityDataOnDemand;
    
    @Autowired
    AddressService AddressDataOnDemand.addressService;
    
    @Autowired
    AddressRepository AddressDataOnDemand.addressRepository;
    
    public Address AddressDataOnDemand.getNewTransientAddress(int index) {
        Address obj = new Address();
        setAddress(obj, index);
        setAddress2(obj, index);
        setCityId(obj, index);
        setDistrict(obj, index);
        setLastUpdate(obj, index);
        setPhone(obj, index);
        setPostalCode(obj, index);
        return obj;
    }
    
    public void AddressDataOnDemand.setAddress(Address obj, int index) {
        String address = "address_" + index;
        if (address.length() > 50) {
            address = address.substring(0, 50);
        }
        obj.setAddress(address);
    }
    
    public void AddressDataOnDemand.setAddress2(Address obj, int index) {
        String address2 = "address2_" + index;
        if (address2.length() > 50) {
            address2 = address2.substring(0, 50);
        }
        obj.setAddress2(address2);
    }
    
    public void AddressDataOnDemand.setCityId(Address obj, int index) {
        City cityId = cityDataOnDemand.getRandomCity();
        obj.setCityId(cityId);
    }
    
    public void AddressDataOnDemand.setDistrict(Address obj, int index) {
        String district = "district_" + index;
        if (district.length() > 20) {
            district = district.substring(0, 20);
        }
        obj.setDistrict(district);
    }
    
    public void AddressDataOnDemand.setLastUpdate(Address obj, int index) {
        Calendar lastUpdate = Calendar.getInstance();
        obj.setLastUpdate(lastUpdate);
    }
    
    public void AddressDataOnDemand.setPhone(Address obj, int index) {
        String phone = "phone_" + index;
        if (phone.length() > 20) {
            phone = phone.substring(0, 20);
        }
        obj.setPhone(phone);
    }
    
    public void AddressDataOnDemand.setPostalCode(Address obj, int index) {
        String postalCode = "postalCo_" + index;
        if (postalCode.length() > 10) {
            postalCode = postalCode.substring(0, 10);
        }
        obj.setPostalCode(postalCode);
    }
    
    public Address AddressDataOnDemand.getSpecificAddress(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Address obj = data.get(index);
        Short id = obj.getAddressId();
        return addressService.findAddress(id);
    }
    
    public Address AddressDataOnDemand.getRandomAddress() {
        init();
        Address obj = data.get(rnd.nextInt(data.size()));
        Short id = obj.getAddressId();
        return addressService.findAddress(id);
    }
    
    public boolean AddressDataOnDemand.modifyAddress(Address obj) {
        return false;
    }
    
    public void AddressDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = addressService.findAddressEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Address' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Address>();
        for (int i = 0; i < 10; i++) {
            Address obj = getNewTransientAddress(i);
            try {
                addressService.saveAddress(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            addressRepository.flush();
            data.add(obj);
        }
    }
    
}
