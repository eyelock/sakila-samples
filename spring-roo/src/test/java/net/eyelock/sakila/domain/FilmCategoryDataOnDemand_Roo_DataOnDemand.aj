// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.sakila.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import net.eyelock.sakila.domain.Category;
import net.eyelock.sakila.domain.CategoryDataOnDemand;
import net.eyelock.sakila.domain.Film;
import net.eyelock.sakila.domain.FilmCategory;
import net.eyelock.sakila.domain.FilmCategoryDataOnDemand;
import net.eyelock.sakila.domain.FilmCategoryPK;
import net.eyelock.sakila.domain.FilmDataOnDemand;
import net.eyelock.sakila.repositories.FilmCategoryRepository;
import net.eyelock.sakila.services.FilmCategoryService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect FilmCategoryDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FilmCategoryDataOnDemand: @Component;
    
    private Random FilmCategoryDataOnDemand.rnd = new SecureRandom();
    
    private List<FilmCategory> FilmCategoryDataOnDemand.data;
    
    @Autowired
    CategoryDataOnDemand FilmCategoryDataOnDemand.categoryDataOnDemand;
    
    @Autowired
    FilmDataOnDemand FilmCategoryDataOnDemand.filmDataOnDemand;
    
    @Autowired
    FilmCategoryService FilmCategoryDataOnDemand.filmCategoryService;
    
    @Autowired
    FilmCategoryRepository FilmCategoryDataOnDemand.filmCategoryRepository;
    
    public FilmCategory FilmCategoryDataOnDemand.getNewTransientFilmCategory(int index) {
        FilmCategory obj = new FilmCategory();
        setEmbeddedIdClass(obj, index);
        setCategoryId(obj, index);
        setFilmId(obj, index);
        setLastUpdate(obj, index);
        return obj;
    }
    
    public void FilmCategoryDataOnDemand.setEmbeddedIdClass(FilmCategory obj, int index) {
        Short filmId = new Integer(index).shortValue();
        Short categoryId = new Integer(index).shortValue();
        
        FilmCategoryPK embeddedIdClass = new FilmCategoryPK(filmId, categoryId);
        obj.setId(embeddedIdClass);
    }
    
    public void FilmCategoryDataOnDemand.setCategoryId(FilmCategory obj, int index) {
        Category categoryId = categoryDataOnDemand.getRandomCategory();
        obj.setCategoryId(categoryId);
    }
    
    public void FilmCategoryDataOnDemand.setFilmId(FilmCategory obj, int index) {
        Film filmId = filmDataOnDemand.getRandomFilm();
        obj.setFilmId(filmId);
    }
    
    public void FilmCategoryDataOnDemand.setLastUpdate(FilmCategory obj, int index) {
        Calendar lastUpdate = Calendar.getInstance();
        obj.setLastUpdate(lastUpdate);
    }
    
    public FilmCategory FilmCategoryDataOnDemand.getSpecificFilmCategory(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        FilmCategory obj = data.get(index);
        FilmCategoryPK id = obj.getId();
        return filmCategoryService.findFilmCategory(id);
    }
    
    public FilmCategory FilmCategoryDataOnDemand.getRandomFilmCategory() {
        init();
        FilmCategory obj = data.get(rnd.nextInt(data.size()));
        FilmCategoryPK id = obj.getId();
        return filmCategoryService.findFilmCategory(id);
    }
    
    public boolean FilmCategoryDataOnDemand.modifyFilmCategory(FilmCategory obj) {
        return false;
    }
    
    public void FilmCategoryDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = filmCategoryService.findFilmCategoryEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'FilmCategory' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<FilmCategory>();
        for (int i = 0; i < 10; i++) {
            FilmCategory obj = getNewTransientFilmCategory(i);
            try {
                filmCategoryService.saveFilmCategory(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            filmCategoryRepository.flush();
            data.add(obj);
        }
    }
    
}
