// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.sakila.domain;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import net.eyelock.sakila.domain.Customer;
import net.eyelock.sakila.domain.CustomerDataOnDemand;
import net.eyelock.sakila.domain.Payment;
import net.eyelock.sakila.domain.PaymentDataOnDemand;
import net.eyelock.sakila.domain.RentalDataOnDemand;
import net.eyelock.sakila.domain.Staff;
import net.eyelock.sakila.domain.StaffDataOnDemand;
import net.eyelock.sakila.repositories.PaymentRepository;
import net.eyelock.sakila.services.PaymentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PaymentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PaymentDataOnDemand: @Component;
    
    private Random PaymentDataOnDemand.rnd = new SecureRandom();
    
    private List<Payment> PaymentDataOnDemand.data;
    
    @Autowired
    CustomerDataOnDemand PaymentDataOnDemand.customerDataOnDemand;
    
    @Autowired
    RentalDataOnDemand PaymentDataOnDemand.rentalDataOnDemand;
    
    @Autowired
    StaffDataOnDemand PaymentDataOnDemand.staffDataOnDemand;
    
    @Autowired
    PaymentService PaymentDataOnDemand.paymentService;
    
    @Autowired
    PaymentRepository PaymentDataOnDemand.paymentRepository;
    
    public Payment PaymentDataOnDemand.getNewTransientPayment(int index) {
        Payment obj = new Payment();
        setAmount(obj, index);
        setCustomerId(obj, index);
        setLastUpdate(obj, index);
        setPaymentDate(obj, index);
        setStaffId(obj, index);
        return obj;
    }
    
    public void PaymentDataOnDemand.setAmount(Payment obj, int index) {
        BigDecimal amount = BigDecimal.valueOf(index);
        if (amount.compareTo(new BigDecimal("999.99")) == 1) {
            amount = new BigDecimal("999.99");
        }
        obj.setAmount(amount);
    }
    
    public void PaymentDataOnDemand.setCustomerId(Payment obj, int index) {
        Customer customerId = customerDataOnDemand.getRandomCustomer();
        obj.setCustomerId(customerId);
    }
    
    public void PaymentDataOnDemand.setLastUpdate(Payment obj, int index) {
        Calendar lastUpdate = Calendar.getInstance();
        obj.setLastUpdate(lastUpdate);
    }
    
    public void PaymentDataOnDemand.setPaymentDate(Payment obj, int index) {
        Calendar paymentDate = Calendar.getInstance();
        obj.setPaymentDate(paymentDate);
    }
    
    public void PaymentDataOnDemand.setStaffId(Payment obj, int index) {
        Staff staffId = staffDataOnDemand.getRandomStaff();
        obj.setStaffId(staffId);
    }
    
    public Payment PaymentDataOnDemand.getSpecificPayment(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Payment obj = data.get(index);
        Short id = obj.getPaymentId();
        return paymentService.findPayment(id);
    }
    
    public Payment PaymentDataOnDemand.getRandomPayment() {
        init();
        Payment obj = data.get(rnd.nextInt(data.size()));
        Short id = obj.getPaymentId();
        return paymentService.findPayment(id);
    }
    
    public boolean PaymentDataOnDemand.modifyPayment(Payment obj) {
        return false;
    }
    
    public void PaymentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = paymentService.findPaymentEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Payment' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Payment>();
        for (int i = 0; i < 10; i++) {
            Payment obj = getNewTransientPayment(i);
            try {
                paymentService.savePayment(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            paymentRepository.flush();
            data.add(obj);
        }
    }
    
}
