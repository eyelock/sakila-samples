// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.sakila.domain;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import net.eyelock.sakila.domain.Film;
import net.eyelock.sakila.domain.FilmDataOnDemand;
import net.eyelock.sakila.domain.Language;
import net.eyelock.sakila.domain.LanguageDataOnDemand;
import net.eyelock.sakila.repositories.FilmRepository;
import net.eyelock.sakila.services.FilmService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect FilmDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FilmDataOnDemand: @Component;
    
    private Random FilmDataOnDemand.rnd = new SecureRandom();
    
    private List<Film> FilmDataOnDemand.data;
    
    @Autowired
    LanguageDataOnDemand FilmDataOnDemand.languageDataOnDemand;
    
    @Autowired
    FilmService FilmDataOnDemand.filmService;
    
    @Autowired
    FilmRepository FilmDataOnDemand.filmRepository;
    
    public Film FilmDataOnDemand.getNewTransientFilm(int index) {
        Film obj = new Film();
        setDescription(obj, index);
        setLanguageId(obj, index);
        setLastUpdate(obj, index);
        setLength(obj, index);
        setRating(obj, index);
        setReleaseYear(obj, index);
        setRentalDuration(obj, index);
        setRentalRate(obj, index);
        setReplacementCost(obj, index);
        setSpecialFeatures(obj, index);
        setTitle(obj, index);
        return obj;
    }
    
    public void FilmDataOnDemand.setDescription(Film obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void FilmDataOnDemand.setLanguageId(Film obj, int index) {
        Language languageId = languageDataOnDemand.getRandomLanguage();
        obj.setLanguageId(languageId);
    }
    
    public void FilmDataOnDemand.setLastUpdate(Film obj, int index) {
        Calendar lastUpdate = Calendar.getInstance();
        obj.setLastUpdate(lastUpdate);
    }
    
    public void FilmDataOnDemand.setLength(Film obj, int index) {
        Short length = new Integer(index).shortValue();
        obj.setLength(length);
    }
    
    public void FilmDataOnDemand.setRating(Film obj, int index) {
        String rating = "rat_" + index;
        if (rating.length() > 5) {
            rating = rating.substring(0, 5);
        }
        obj.setRating(rating);
    }
    
    public void FilmDataOnDemand.setReleaseYear(Film obj, int index) {
        Date releaseYear = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setReleaseYear(releaseYear);
    }
    
    public void FilmDataOnDemand.setRentalDuration(Film obj, int index) {
        Short rentalDuration = new Integer(index).shortValue();
        obj.setRentalDuration(rentalDuration);
    }
    
    public void FilmDataOnDemand.setRentalRate(Film obj, int index) {
        BigDecimal rentalRate = BigDecimal.valueOf(index);
        if (rentalRate.compareTo(new BigDecimal("99.99")) == 1) {
            rentalRate = new BigDecimal("99.99");
        }
        obj.setRentalRate(rentalRate);
    }
    
    public void FilmDataOnDemand.setReplacementCost(Film obj, int index) {
        BigDecimal replacementCost = BigDecimal.valueOf(index);
        if (replacementCost.compareTo(new BigDecimal("999.99")) == 1) {
            replacementCost = new BigDecimal("999.99");
        }
        obj.setReplacementCost(replacementCost);
    }
    
    public void FilmDataOnDemand.setSpecialFeatures(Film obj, int index) {
        String specialFeatures = "specialFeatures_" + index;
        if (specialFeatures.length() > 54) {
            specialFeatures = specialFeatures.substring(0, 54);
        }
        obj.setSpecialFeatures(specialFeatures);
    }
    
    public void FilmDataOnDemand.setTitle(Film obj, int index) {
        String title = "title_" + index;
        if (title.length() > 255) {
            title = title.substring(0, 255);
        }
        obj.setTitle(title);
    }
    
    public Film FilmDataOnDemand.getSpecificFilm(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Film obj = data.get(index);
        Short id = obj.getFilmId();
        return filmService.findFilm(id);
    }
    
    public Film FilmDataOnDemand.getRandomFilm() {
        init();
        Film obj = data.get(rnd.nextInt(data.size()));
        Short id = obj.getFilmId();
        return filmService.findFilm(id);
    }
    
    public boolean FilmDataOnDemand.modifyFilm(Film obj) {
        return false;
    }
    
    public void FilmDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = filmService.findFilmEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Film' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Film>();
        for (int i = 0; i < 10; i++) {
            Film obj = getNewTransientFilm(i);
            try {
                filmService.saveFilm(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            filmRepository.flush();
            data.add(obj);
        }
    }
    
}
