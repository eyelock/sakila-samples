// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.sakila.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import net.eyelock.sakila.domain.Address;
import net.eyelock.sakila.domain.AddressDataOnDemand;
import net.eyelock.sakila.domain.Customer;
import net.eyelock.sakila.domain.CustomerDataOnDemand;
import net.eyelock.sakila.domain.Store;
import net.eyelock.sakila.domain.StoreDataOnDemand;
import net.eyelock.sakila.repositories.CustomerRepository;
import net.eyelock.sakila.services.CustomerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CustomerDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CustomerDataOnDemand: @Component;
    
    private Random CustomerDataOnDemand.rnd = new SecureRandom();
    
    private List<Customer> CustomerDataOnDemand.data;
    
    @Autowired
    AddressDataOnDemand CustomerDataOnDemand.addressDataOnDemand;
    
    @Autowired
    StoreDataOnDemand CustomerDataOnDemand.storeDataOnDemand;
    
    @Autowired
    CustomerService CustomerDataOnDemand.customerService;
    
    @Autowired
    CustomerRepository CustomerDataOnDemand.customerRepository;
    
    public Customer CustomerDataOnDemand.getNewTransientCustomer(int index) {
        Customer obj = new Customer();
        setActive(obj, index);
        setAddressId(obj, index);
        setCreateDate(obj, index);
        setEmail(obj, index);
        setFirstName(obj, index);
        setLastName(obj, index);
        setLastUpdate(obj, index);
        setStoreId(obj, index);
        return obj;
    }
    
    public void CustomerDataOnDemand.setActive(Customer obj, int index) {
        Boolean active = true;
        obj.setActive(active);
    }
    
    public void CustomerDataOnDemand.setAddressId(Customer obj, int index) {
        Address addressId = addressDataOnDemand.getRandomAddress();
        obj.setAddressId(addressId);
    }
    
    public void CustomerDataOnDemand.setCreateDate(Customer obj, int index) {
        Calendar createDate = Calendar.getInstance();
        obj.setCreateDate(createDate);
    }
    
    public void CustomerDataOnDemand.setEmail(Customer obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 50) {
            email = email.substring(0, 50);
        }
        obj.setEmail(email);
    }
    
    public void CustomerDataOnDemand.setFirstName(Customer obj, int index) {
        String firstName = "firstName_" + index;
        if (firstName.length() > 45) {
            firstName = firstName.substring(0, 45);
        }
        obj.setFirstName(firstName);
    }
    
    public void CustomerDataOnDemand.setLastName(Customer obj, int index) {
        String lastName = "lastName_" + index;
        if (lastName.length() > 45) {
            lastName = lastName.substring(0, 45);
        }
        obj.setLastName(lastName);
    }
    
    public void CustomerDataOnDemand.setLastUpdate(Customer obj, int index) {
        Calendar lastUpdate = Calendar.getInstance();
        obj.setLastUpdate(lastUpdate);
    }
    
    public void CustomerDataOnDemand.setStoreId(Customer obj, int index) {
        Store storeId = storeDataOnDemand.getRandomStore();
        obj.setStoreId(storeId);
    }
    
    public Customer CustomerDataOnDemand.getSpecificCustomer(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Customer obj = data.get(index);
        Short id = obj.getCustomerId();
        return customerService.findCustomer(id);
    }
    
    public Customer CustomerDataOnDemand.getRandomCustomer() {
        init();
        Customer obj = data.get(rnd.nextInt(data.size()));
        Short id = obj.getCustomerId();
        return customerService.findCustomer(id);
    }
    
    public boolean CustomerDataOnDemand.modifyCustomer(Customer obj) {
        return false;
    }
    
    public void CustomerDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = customerService.findCustomerEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Customer' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Customer>();
        for (int i = 0; i < 10; i++) {
            Customer obj = getNewTransientCustomer(i);
            try {
                customerService.saveCustomer(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            customerRepository.flush();
            data.add(obj);
        }
    }
    
}
