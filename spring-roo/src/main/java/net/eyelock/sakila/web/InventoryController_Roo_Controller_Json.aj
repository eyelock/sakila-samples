// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.sakila.web;

import java.util.List;
import net.eyelock.sakila.domain.Inventory;
import net.eyelock.sakila.web.InventoryController;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect InventoryController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{inventoryId}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> InventoryController.showJson(@PathVariable("inventoryId") Integer inventoryId) {
        Inventory inventory = inventoryService.findInventory(inventoryId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (inventory == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(inventory.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> InventoryController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Inventory> result = inventoryService.findAllInventorys();
        return new ResponseEntity<String>(Inventory.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> InventoryController.createFromJson(@RequestBody String json, UriComponentsBuilder uriBuilder) {
        Inventory inventory = Inventory.fromJsonToInventory(json);
        inventoryService.saveInventory(inventory);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        RequestMapping a = (RequestMapping) getClass().getAnnotation(RequestMapping.class);
        headers.add("Location",uriBuilder.path(a.value()[0]+"/"+inventory.getId().toString()).build().toUriString());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> InventoryController.createFromJsonArray(@RequestBody String json) {
        for (Inventory inventory: Inventory.fromJsonArrayToInventorys(json)) {
            inventoryService.saveInventory(inventory);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{inventoryId}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> InventoryController.updateFromJson(@RequestBody String json, @PathVariable("inventoryId") Integer inventoryId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Inventory inventory = Inventory.fromJsonToInventory(json);
        inventory.setInventoryId(inventoryId);
        if (inventoryService.updateInventory(inventory) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{inventoryId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> InventoryController.deleteFromJson(@PathVariable("inventoryId") Integer inventoryId) {
        Inventory inventory = inventoryService.findInventory(inventoryId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (inventory == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        inventoryService.deleteInventory(inventory);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
