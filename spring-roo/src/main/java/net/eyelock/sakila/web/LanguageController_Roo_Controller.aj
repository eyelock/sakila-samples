// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.sakila.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import net.eyelock.sakila.domain.Language;
import net.eyelock.sakila.services.FilmService;
import net.eyelock.sakila.services.LanguageService;
import net.eyelock.sakila.web.LanguageController;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect LanguageController_Roo_Controller {
    
    @Autowired
    LanguageService LanguageController.languageService;
    
    @Autowired
    FilmService LanguageController.filmService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String LanguageController.create(@Valid Language language, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, language);
            return "languages/create";
        }
        uiModel.asMap().clear();
        languageService.saveLanguage(language);
        return "redirect:/languages/" + encodeUrlPathSegment(language.getLanguageId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String LanguageController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Language());
        return "languages/create";
    }
    
    @RequestMapping(value = "/{languageId}", produces = "text/html")
    public String LanguageController.show(@PathVariable("languageId") Short languageId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("language", languageService.findLanguage(languageId));
        uiModel.addAttribute("itemId", languageId);
        return "languages/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String LanguageController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("languages", languageService.findLanguageEntries(firstResult, sizeNo));
            float nrOfPages = (float) languageService.countAllLanguages() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("languages", languageService.findAllLanguages());
        }
        addDateTimeFormatPatterns(uiModel);
        return "languages/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String LanguageController.update(@Valid Language language, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, language);
            return "languages/update";
        }
        uiModel.asMap().clear();
        languageService.updateLanguage(language);
        return "redirect:/languages/" + encodeUrlPathSegment(language.getLanguageId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{languageId}", params = "form", produces = "text/html")
    public String LanguageController.updateForm(@PathVariable("languageId") Short languageId, Model uiModel) {
        populateEditForm(uiModel, languageService.findLanguage(languageId));
        return "languages/update";
    }
    
    @RequestMapping(value = "/{languageId}", method = RequestMethod.DELETE, produces = "text/html")
    public String LanguageController.delete(@PathVariable("languageId") Short languageId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Language language = languageService.findLanguage(languageId);
        languageService.deleteLanguage(language);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/languages";
    }
    
    void LanguageController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("language_lastupdate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void LanguageController.populateEditForm(Model uiModel, Language language) {
        uiModel.addAttribute("language", language);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("films", filmService.findAllFilms());
    }
    
    String LanguageController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
