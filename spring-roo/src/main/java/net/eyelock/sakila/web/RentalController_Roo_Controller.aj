// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.sakila.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import net.eyelock.sakila.domain.Rental;
import net.eyelock.sakila.services.PaymentService;
import net.eyelock.sakila.services.RentalService;
import net.eyelock.sakila.services.StaffService;
import net.eyelock.sakila.web.RentalController;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect RentalController_Roo_Controller {
    
    @Autowired
    RentalService RentalController.rentalService;
    
    @Autowired
    PaymentService RentalController.paymentService;
    
    @Autowired
    StaffService RentalController.staffService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String RentalController.create(@Valid Rental rental, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, rental);
            return "rentals/create";
        }
        uiModel.asMap().clear();
        rentalService.saveRental(rental);
        return "redirect:/rentals/" + encodeUrlPathSegment(rental.getRentalId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String RentalController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Rental());
        return "rentals/create";
    }
    
    @RequestMapping(value = "/{rentalId}", produces = "text/html")
    public String RentalController.show(@PathVariable("rentalId") Integer rentalId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("rental", rentalService.findRental(rentalId));
        uiModel.addAttribute("itemId", rentalId);
        return "rentals/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String RentalController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("rentals", rentalService.findRentalEntries(firstResult, sizeNo));
            float nrOfPages = (float) rentalService.countAllRentals() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("rentals", rentalService.findAllRentals());
        }
        addDateTimeFormatPatterns(uiModel);
        return "rentals/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String RentalController.update(@Valid Rental rental, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, rental);
            return "rentals/update";
        }
        uiModel.asMap().clear();
        rentalService.updateRental(rental);
        return "redirect:/rentals/" + encodeUrlPathSegment(rental.getRentalId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{rentalId}", params = "form", produces = "text/html")
    public String RentalController.updateForm(@PathVariable("rentalId") Integer rentalId, Model uiModel) {
        populateEditForm(uiModel, rentalService.findRental(rentalId));
        return "rentals/update";
    }
    
    @RequestMapping(value = "/{rentalId}", method = RequestMethod.DELETE, produces = "text/html")
    public String RentalController.delete(@PathVariable("rentalId") Integer rentalId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Rental rental = rentalService.findRental(rentalId);
        rentalService.deleteRental(rental);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/rentals";
    }
    
    void RentalController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("rental_rentaldate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("rental_returndate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("rental_lastupdate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void RentalController.populateEditForm(Model uiModel, Rental rental) {
        uiModel.addAttribute("rental", rental);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("customers", customerService.findAllCustomers());
        uiModel.addAttribute("inventorys", inventoryService.findAllInventorys());
        uiModel.addAttribute("payments", paymentService.findAllPayments());
        uiModel.addAttribute("staffs", staffService.findAllStaffs());
    }
    
    String RentalController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
