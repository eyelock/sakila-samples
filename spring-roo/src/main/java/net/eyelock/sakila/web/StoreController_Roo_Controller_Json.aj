// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.sakila.web;

import net.eyelock.sakila.domain.Store;
import net.eyelock.sakila.web.StoreController;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect StoreController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{storeId}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> StoreController.showJson(@PathVariable("storeId") Short storeId) {
        Store store = storeService.findStore(storeId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (store == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(store.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> StoreController.createFromJson(@RequestBody String json, UriComponentsBuilder uriBuilder) {
        Store store = Store.fromJsonToStore(json);
        storeService.saveStore(store);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        RequestMapping a = (RequestMapping) getClass().getAnnotation(RequestMapping.class);
        headers.add("Location",uriBuilder.path(a.value()[0]+"/"+store.getId().toString()).build().toUriString());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> StoreController.createFromJsonArray(@RequestBody String json) {
        for (Store store: Store.fromJsonArrayToStores(json)) {
            storeService.saveStore(store);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{storeId}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> StoreController.updateFromJson(@RequestBody String json, @PathVariable("storeId") Short storeId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Store store = Store.fromJsonToStore(json);
        store.setStoreId(storeId);
        if (storeService.updateStore(store) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{storeId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> StoreController.deleteFromJson(@PathVariable("storeId") Short storeId) {
        Store store = storeService.findStore(storeId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (store == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        storeService.deleteStore(store);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
