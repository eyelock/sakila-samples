// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.sakila.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import net.eyelock.sakila.domain.FilmActor;
import net.eyelock.sakila.domain.FilmActorPK;
import net.eyelock.sakila.services.ActorService;
import net.eyelock.sakila.services.FilmActorService;
import net.eyelock.sakila.services.FilmService;
import net.eyelock.sakila.web.FilmActorController;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect FilmActorController_Roo_Controller {
    
    private ConversionService FilmActorController.conversionService;
    
    @Autowired
    FilmActorService FilmActorController.filmActorService;
    
    @Autowired
    ActorService FilmActorController.actorService;
    
    @Autowired
    FilmService FilmActorController.filmService;
    
    @Autowired
    public FilmActorController.new(ConversionService conversionService) {
        super();
        this.conversionService = conversionService;
    }

    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String FilmActorController.create(@Valid FilmActor filmActor, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, filmActor);
            return "filmactors/create";
        }
        uiModel.asMap().clear();
        filmActorService.saveFilmActor(filmActor);
        return "redirect:/filmactors/" + encodeUrlPathSegment(conversionService.convert(filmActor.getId(), String.class), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String FilmActorController.createForm(Model uiModel) {
        populateEditForm(uiModel, new FilmActor());
        return "filmactors/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String FilmActorController.show(@PathVariable("id") FilmActorPK id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("filmactor", filmActorService.findFilmActor(id));
        uiModel.addAttribute("itemId", conversionService.convert(id, String.class));
        return "filmactors/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String FilmActorController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("filmactors", filmActorService.findFilmActorEntries(firstResult, sizeNo));
            float nrOfPages = (float) filmActorService.countAllFilmActors() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("filmactors", filmActorService.findAllFilmActors());
        }
        addDateTimeFormatPatterns(uiModel);
        return "filmactors/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String FilmActorController.update(@Valid FilmActor filmActor, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, filmActor);
            return "filmactors/update";
        }
        uiModel.asMap().clear();
        filmActorService.updateFilmActor(filmActor);
        return "redirect:/filmactors/" + encodeUrlPathSegment(conversionService.convert(filmActor.getId(), String.class), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String FilmActorController.updateForm(@PathVariable("id") FilmActorPK id, Model uiModel) {
        populateEditForm(uiModel, filmActorService.findFilmActor(id));
        return "filmactors/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String FilmActorController.delete(@PathVariable("id") FilmActorPK id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        FilmActor filmActor = filmActorService.findFilmActor(id);
        filmActorService.deleteFilmActor(filmActor);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/filmactors";
    }
    
    void FilmActorController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("filmActor_lastupdate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void FilmActorController.populateEditForm(Model uiModel, FilmActor filmActor) {
        uiModel.addAttribute("filmActor", filmActor);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("actors", actorService.findAllActors());
        uiModel.addAttribute("films", filmService.findAllFilms());
    }
    
    String FilmActorController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
