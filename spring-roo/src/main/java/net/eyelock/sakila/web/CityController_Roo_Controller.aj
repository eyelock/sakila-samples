// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.sakila.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import net.eyelock.sakila.domain.City;
import net.eyelock.sakila.services.AddressService;
import net.eyelock.sakila.services.CityService;
import net.eyelock.sakila.services.CountryService;
import net.eyelock.sakila.web.CityController;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect CityController_Roo_Controller {
    
    @Autowired
    CityService CityController.cityService;
    
    @Autowired
    AddressService CityController.addressService;
    
    @Autowired
    CountryService CityController.countryService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String CityController.create(@Valid City city, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, city);
            return "cities/create";
        }
        uiModel.asMap().clear();
        cityService.saveCity(city);
        return "redirect:/cities/" + encodeUrlPathSegment(city.getCityId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String CityController.createForm(Model uiModel) {
        populateEditForm(uiModel, new City());
        return "cities/create";
    }
    
    @RequestMapping(value = "/{cityId}", produces = "text/html")
    public String CityController.show(@PathVariable("cityId") Short cityId, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("city", cityService.findCity(cityId));
        uiModel.addAttribute("itemId", cityId);
        return "cities/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String CityController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("citys", cityService.findCityEntries(firstResult, sizeNo));
            float nrOfPages = (float) cityService.countAllCitys() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("citys", cityService.findAllCitys());
        }
        addDateTimeFormatPatterns(uiModel);
        return "cities/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String CityController.update(@Valid City city, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, city);
            return "cities/update";
        }
        uiModel.asMap().clear();
        cityService.updateCity(city);
        return "redirect:/cities/" + encodeUrlPathSegment(city.getCityId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{cityId}", params = "form", produces = "text/html")
    public String CityController.updateForm(@PathVariable("cityId") Short cityId, Model uiModel) {
        populateEditForm(uiModel, cityService.findCity(cityId));
        return "cities/update";
    }
    
    @RequestMapping(value = "/{cityId}", method = RequestMethod.DELETE, produces = "text/html")
    public String CityController.delete(@PathVariable("cityId") Short cityId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        City city = cityService.findCity(cityId);
        cityService.deleteCity(city);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/cities";
    }
    
    void CityController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("city_lastupdate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void CityController.populateEditForm(Model uiModel, City city) {
        uiModel.addAttribute("city", city);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("addresses", addressService.findAllAddresses());
        uiModel.addAttribute("countrys", countryService.findAllCountrys());
    }
    
    String CityController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
