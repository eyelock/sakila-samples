// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.sakila.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import net.eyelock.sakila.domain.FilmCategory;
import net.eyelock.sakila.domain.FilmCategoryPK;
import net.eyelock.sakila.services.CategoryService;
import net.eyelock.sakila.services.FilmCategoryService;
import net.eyelock.sakila.services.FilmService;
import net.eyelock.sakila.web.FilmCategoryController;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect FilmCategoryController_Roo_Controller {
    
    private ConversionService FilmCategoryController.conversionService;
    
    @Autowired
    FilmCategoryService FilmCategoryController.filmCategoryService;
    
    @Autowired
    CategoryService FilmCategoryController.categoryService;
    
    @Autowired
    FilmService FilmCategoryController.filmService;
    
    @Autowired
    public FilmCategoryController.new(ConversionService conversionService) {
        super();
        this.conversionService = conversionService;
    }

    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String FilmCategoryController.create(@Valid FilmCategory filmCategory, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, filmCategory);
            return "filmcategories/create";
        }
        uiModel.asMap().clear();
        filmCategoryService.saveFilmCategory(filmCategory);
        return "redirect:/filmcategories/" + encodeUrlPathSegment(conversionService.convert(filmCategory.getId(), String.class), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String FilmCategoryController.createForm(Model uiModel) {
        populateEditForm(uiModel, new FilmCategory());
        return "filmcategories/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String FilmCategoryController.show(@PathVariable("id") FilmCategoryPK id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("filmcategory", filmCategoryService.findFilmCategory(id));
        uiModel.addAttribute("itemId", conversionService.convert(id, String.class));
        return "filmcategories/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String FilmCategoryController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("filmcategorys", filmCategoryService.findFilmCategoryEntries(firstResult, sizeNo));
            float nrOfPages = (float) filmCategoryService.countAllFilmCategorys() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("filmcategorys", filmCategoryService.findAllFilmCategorys());
        }
        addDateTimeFormatPatterns(uiModel);
        return "filmcategories/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String FilmCategoryController.update(@Valid FilmCategory filmCategory, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, filmCategory);
            return "filmcategories/update";
        }
        uiModel.asMap().clear();
        filmCategoryService.updateFilmCategory(filmCategory);
        return "redirect:/filmcategories/" + encodeUrlPathSegment(conversionService.convert(filmCategory.getId(), String.class), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String FilmCategoryController.updateForm(@PathVariable("id") FilmCategoryPK id, Model uiModel) {
        populateEditForm(uiModel, filmCategoryService.findFilmCategory(id));
        return "filmcategories/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String FilmCategoryController.delete(@PathVariable("id") FilmCategoryPK id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        FilmCategory filmCategory = filmCategoryService.findFilmCategory(id);
        filmCategoryService.deleteFilmCategory(filmCategory);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/filmcategories";
    }
    
    void FilmCategoryController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("filmCategory_lastupdate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void FilmCategoryController.populateEditForm(Model uiModel, FilmCategory filmCategory) {
        uiModel.addAttribute("filmCategory", filmCategory);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("categorys", categoryService.findAllCategorys());
        uiModel.addAttribute("films", filmService.findAllFilms());
    }
    
    String FilmCategoryController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
