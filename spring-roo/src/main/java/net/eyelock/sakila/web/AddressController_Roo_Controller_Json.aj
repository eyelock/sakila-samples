// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.sakila.web;

import java.util.List;
import net.eyelock.sakila.domain.Address;
import net.eyelock.sakila.web.AddressController;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponentsBuilder;

privileged aspect AddressController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{addressId}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AddressController.showJson(@PathVariable("addressId") Short addressId) {
        Address address = addressService.findAddress(addressId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (address == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(address.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AddressController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Address> result = addressService.findAllAddresses();
        return new ResponseEntity<String>(Address.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> AddressController.createFromJson(@RequestBody String json, UriComponentsBuilder uriBuilder) {
        Address address = Address.fromJsonToAddress(json);
        addressService.saveAddress(address);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        RequestMapping a = (RequestMapping) getClass().getAnnotation(RequestMapping.class);
        headers.add("Location",uriBuilder.path(a.value()[0]+"/"+address.getId().toString()).build().toUriString());
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> AddressController.createFromJsonArray(@RequestBody String json) {
        for (Address address: Address.fromJsonArrayToAddresses(json)) {
            addressService.saveAddress(address);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{addressId}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> AddressController.updateFromJson(@RequestBody String json, @PathVariable("addressId") Short addressId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Address address = Address.fromJsonToAddress(json);
        address.setAddressId(addressId);
        if (addressService.updateAddress(address) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{addressId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> AddressController.deleteFromJson(@PathVariable("addressId") Short addressId) {
        Address address = addressService.findAddress(addressId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (address == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        addressService.deleteAddress(address);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
