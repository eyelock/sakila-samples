// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.eyelock.sakila.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import net.eyelock.sakila.domain.FilmText;
import net.eyelock.sakila.services.FilmTextService;
import net.eyelock.sakila.web.FilmTextController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect FilmTextController_Roo_Controller {
    
    @Autowired
    FilmTextService FilmTextController.filmTextService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String FilmTextController.create(@Valid FilmText filmText, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, filmText);
            return "filmtexts/create";
        }
        uiModel.asMap().clear();
        filmTextService.saveFilmText(filmText);
        return "redirect:/filmtexts/" + encodeUrlPathSegment(filmText.getFilmId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String FilmTextController.createForm(Model uiModel) {
        populateEditForm(uiModel, new FilmText());
        return "filmtexts/create";
    }
    
    @RequestMapping(value = "/{filmId}", produces = "text/html")
    public String FilmTextController.show(@PathVariable("filmId") Short filmId, Model uiModel) {
        uiModel.addAttribute("filmtext", filmTextService.findFilmText(filmId));
        uiModel.addAttribute("itemId", filmId);
        return "filmtexts/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String FilmTextController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("filmtexts", filmTextService.findFilmTextEntries(firstResult, sizeNo));
            float nrOfPages = (float) filmTextService.countAllFilmTexts() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("filmtexts", filmTextService.findAllFilmTexts());
        }
        return "filmtexts/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String FilmTextController.update(@Valid FilmText filmText, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, filmText);
            return "filmtexts/update";
        }
        uiModel.asMap().clear();
        filmTextService.updateFilmText(filmText);
        return "redirect:/filmtexts/" + encodeUrlPathSegment(filmText.getFilmId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{filmId}", params = "form", produces = "text/html")
    public String FilmTextController.updateForm(@PathVariable("filmId") Short filmId, Model uiModel) {
        populateEditForm(uiModel, filmTextService.findFilmText(filmId));
        return "filmtexts/update";
    }
    
    @RequestMapping(value = "/{filmId}", method = RequestMethod.DELETE, produces = "text/html")
    public String FilmTextController.delete(@PathVariable("filmId") Short filmId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        FilmText filmText = filmTextService.findFilmText(filmId);
        filmTextService.deleteFilmText(filmText);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/filmtexts";
    }
    
    void FilmTextController.populateEditForm(Model uiModel, FilmText filmText) {
        uiModel.addAttribute("filmText", filmText);
    }
    
    String FilmTextController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
